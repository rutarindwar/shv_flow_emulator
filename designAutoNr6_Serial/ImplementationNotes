Belham_Valley_datareader_auto.m

About read_in_zgrid:
No need to return a 3D matrix. The first plane is made of copies of the first
column (X), whereas the second plane has copies of the 1st row (Y);
The last plane(3) should be read in a usual. Since Belham_Valley_datareader ...
will transpose it, return a 2d matrix of size (Nx, Ny), i.e fill the matrix
row by row. 




matrix_PrintPart2(xyh, 39, 49, 59, 64, 4);
	vect_PrintPart(xgridvals, 0, 10, 5);
	vect_PrintPart(ygridvals, 0, 10, 5);


/* Combine finding the total sum and the max of heights. 
			Better than parsing the matrix twice */		
		for(i = 0; i<ny; i++){
			for(j = 0; j<nx; j++){
				msum += xyh[i][j];
				if (xyh[i][j] > maxm){
					maxm = xyh[i][j];
				}
			}
		}

!! THE BUG IS IN VECT2DINTERP !!


printf("%d\n", j); j++;




j = 0;
		for(i = 1; i<elevNy; i+= 2){
			hrowtemp[i] = xyh[j][nx-1];
			//printf("temp = %3.4f\n", xyh[j][nx-1]);
			j++;
		}
		
		//vect_Print(hrowtemp, elevNy, 4);
		j = 1;
		for (i= 2; i<elevNy; i+= 2){
			hrowtemp[i] = (hrowtemp[i-1] + hrowtemp[i+1])/2;
		}
	
		//vect_Print(hrowtemp, elevNy, 4);




printf("(%d) \t %3.4f \t %3.4f \n", i, heights[i-1][elevNy-1], 
					heights[i+1][elevNx


heights[i-2][0] = (heights[i-1][0] + heights[i+2][0])/2;

for(i = 0; i<elevNy; i++){
			printf("(%d) \t %3.4f \n", i+1, heights[elevNx-1][i]);
		}


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


/* Fix first and last columns */
		for(i = 1; i<elevNx; i+=2){
				heights[i][elevNy-1] = xyh[ny-1][j];
				heights[i][0] = xyh[0][j];
				j++;
				//printf("(%d) \t %3.4f\n", j, heights[i][elevNy-1]);
		}
		
		/*for(i = 0; i<elevNx; i++){
				printf("%3.4f\n", heights[i][elevNy-1]);
		}
		*/
		j = 0;
		for(i = 2; i<elevNx; i+=2){
			heights[i][elevNy-1] = (heights[i-1][elevNy-1] + 
										heights[i+1][elevNy-1])/2;
			j++;
				
		}
		

***********************************************************************************

/*
		for(i = 0; i<elevNy; i++){
				printf("(%d) \t %3.4f\n",i+1, heights[0][i]);
		}
		
		*/
	


 Prints part of heights matrix
//matrix_PrintPart2(heights, elevNx-4, elevNx-1, elevNy-4, elevNy-1, 4);







	matrix_PrintPart2(hsave, 169, 179, 1, 1, 4);



























